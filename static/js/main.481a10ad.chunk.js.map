{"version":3,"sources":["images.js","components/Cards/index.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["pictuers","id","img","Cards","props","react_default","a","createElement","onClick","clicked","src","alt","Nav","score","App","state","images","length","shuffle","newArray","_this","sort","Math","random","setState","iamges","photoId","includes","alert","newscore","push","checkWin","this","_this2","_this$state","react","components_Nav","className","map","photos","i","components_Cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwBeA,EAvBf,CACI,CACIC,GAAM,EACNC,IAAO,yBAEX,CACID,GAAM,EACNC,IAAO,2BAEX,CACID,GAAM,EACNC,IAAO,2BAEX,CACID,GAAM,EACNC,IAAO,2BAEX,CACID,GAAM,EACNC,IAAO,4BCNAC,SAXD,SAACC,GAEX,OACIC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,QAAS,WACbJ,EAAMK,QAASL,EAAMH,KACpBS,IAAKN,EAAMF,IAAKS,IAAI,YCEhBC,EATH,SAACR,GAET,OACIC,EAAAC,EAAAC,cAAA,qBACWH,EAAMS,QC2EVC,6MA3EbC,MAAQ,CACNF,MAAO,EACPG,OAAQ,GACRC,OAAQ,EACRR,QAAS,MAWXS,QAAU,WAER,IAAIC,EAAWC,EAAKL,MAAMC,OAI1BG,EAAWA,EAASE,KAAK,kBAAMC,KAAKC,SAAW,IAG/CH,EAAKI,SAAS,CACZC,OAAQN,OAIZV,QAAS,SAACiB,GACR,IAAIjB,EAAUW,EAAKL,MAAMN,QAEzB,GAAIA,EAAQkB,SAASD,GACnBE,MAAM,YACNR,EAAKI,SAAS,CACZX,MAAO,EACPJ,QAAS,KAEXW,EAAKF,cACA,CACL,IAAIW,EAAWT,EAAKL,MAAMF,MAC1BgB,GAAqB,EACrBT,EAAKI,SAAS,CACZX,MAAOgB,IAETpB,EAAQqB,KAAKJ,GACbN,EAAKI,SAAS,CAACf,YACfW,EAAKF,UAEPE,EAAKW,cAGPA,SAAU,WACJX,EAAKL,MAAME,SAAWG,EAAKL,MAAMN,QAAQQ,SAC3CW,MAAM,WACNR,EAAKI,SAAS,CACZX,MAAO,EACPJ,QAAS,0FAhDbuB,KAAKR,SAAS,CACZR,SACAC,OAAQD,EAAOC,0CAmDV,IAAAgB,EAAAD,KAAAE,EACiBF,KAAKjB,MAAtBC,EADAkB,EACAlB,OAAQH,EADRqB,EACQrB,MACf,OACER,EAAAC,EAAAC,cAAC4B,EAAA,SAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAKvB,MAAQA,IACbR,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,YACZrB,EAAOsB,IAAI,SAACC,EAAQC,GAAT,OAAenC,EAAAC,EAAAC,cAACkC,EAAD,CAAOxC,GAAIsC,EAAOtC,GAAIyC,IAAKF,EAAGtC,IAAKqC,EAAOrC,IAAKO,QAASwB,EAAKxB,qBAtEhFkC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.481a10ad.chunk.js","sourcesContent":["let pictuers = \n[\n    {\n        \"id\": 0,\n        \"img\": \"./images/Unknown.jpeg\"\n    },\n    {\n        \"id\": 1,\n        \"img\": \"./images/Unknown-1.jpeg\"\n    },\n    {\n        \"id\": 2,\n        \"img\": \"./images/Unknown-2.jpeg\"\n    },\n    {\n        \"id\": 3,\n        \"img\": \"./images/Unknown-3.jpeg\"\n    },\n    {\n        \"id\": 4,\n        \"img\": \"./images/Unknown-4.jpeg\"\n    }\n]\n\nexport default pictuers; ","import React from \"react\";\nimport \"./style.css\";\n\nconst Cards = (props) => {\n    \n    return (\n        <div>\n         <img onClick={() => {\n          props.clicked (props.id)\n        }} src={props.img} alt=\"test\"/> \n        </div>\n    )\n}\n\nexport default Cards;","import React from \"react\";\n\nconst Nav = (props) => {\n    \n    return (\n        <div>\n           Score: {props.score}\n        </div>\n    )\n}\n\nexport default Nav;","import React, { Component, Fragment } from 'react';\nimport images from './images';\nimport Cards from './components/Cards/';\nimport Nav from './components/Nav';\nclass App extends Component {\n\n  state = {\n    score: 0,\n    images: [],\n    length: 0,\n    clicked: []\n  \n  }\n\n  componentDidMount() {\n    this.setState({\n      images,\n      length: images.length\n    })\n  }\n\n  shuffle = () =>{\n    //grab the iamge array from state\n    let newArray = this.state.images;\n\n    //rearage the array\n\n    newArray = newArray.sort(() => Math.random() - 0.0);\n\n    // setstate to new rearanged array\n    this.setState({\n      iamges: newArray\n    })\n  }\n\n  clicked =(photoId) => {\n    let clicked = this.state.clicked\n    //check cilcked array if id is alraedy in the array\n    if (clicked.includes(photoId)){\n      alert(\"You lost\")\n      this.setState({\n        score: 0,\n        clicked: []\n      })\n      this.shuffle();\n    } else {\n      let newscore = this.state.score;\n      newscore = newscore +1 \n      this.setState({\n        score: newscore\n      })\n      clicked.push(photoId);\n      this.setState({clicked})\n      this.shuffle();\n    }\n    this.checkWin();\n  }\n\n  checkWin =() =>{\n    if (this.state.length === this.state.clicked.length) {\n      alert(\"You Win\")\n      this.setState({\n        score: 0,\n        clicked: []\n      }) \n    }\n  }\n\n  render() {\n    const {images, score} = this.state;\n    return (\n      <Fragment>\n        <Nav score= {score} />\n        <div className=\"img-game\">\n          {images.map((photos, i) => <Cards id={photos.id} key={i} img={photos.img} clicked={this.clicked}/> )}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}